; 'NES-simple sprite example'
;---------------------------------------------------------------------
; Implemented in ATALAN Programming language
; by Marcel Cevani
; 14.01.2011
;---------------------------------------------------------------------
; This is example some sprites are displayed by sending the OAM data to the PPU chip.
; Please run the buildSprite.bat file, it append the gfx data to the rom
; Tnx to Patater for his nice Nes dev tutorials (http://www.patater.com/nes-asm-tutorials) ;)
; gfx test data is a ripped version of chr rom from SML
; NROM:
; Max codesize : 16Kib
; Max gfxsize  : 4Kib
;---------------------------------------------------------------------

use nes

;-----defines for PPU unit (gfx chip)------------
out PPU_REG1@$2000:byte
out PPU_REG2@$2001:byte
in  sequence PPU_STAT_REG@$2002:byte
out PPU_OAM_ADR@$2003:byte
out PPU_OAM_DATA@$2004:byte

out PPU_DATA_ADR@$2006:byte
out PPU_DATA@$2007:byte

;-----defines for PPU unit (gfx chip)------------

const spritePal:array(32) = ($0F,$31,$32,$33,$0F,$35,$36,$37,$0F,$39,$3A,$3B,$0F,$3D,$3E,$0F,$0F,$1C,$15,$14,$0F,$02,$38,$3C,$0F,$1C,$15,$14,$0F,$02,$38,$3C)


;-----this function waits until we are in the VBlank intervall------------
; In this timewindow, it is possible to change gfx, without notable glitches
waitvbl:proc =
	until PPU_STAT_REG bitand 128 <> 0 

tmp:0..255

;---- loading pal data to VRAM ($3F00)
loadPal:proc =
        PPU_DATA_ADR = $3F
        PPU_DATA_ADR = $00
        for i:0..31
              PPU_DATA  = spritePal(i)

;function write's one sprite to OAM ram
setSprite:proc(<oamnr:byte <nr:byte <x:byte <y:byte) = 
	PPU_OAM_ADR  = 0 ; write to oam index nr * 4
	PPU_OAM_ADR  = oamnr * 4; 
	PPU_OAM_DATA = y
	PPU_OAM_DATA = nr
	PPU_OAM_DATA = 0
	PPU_OAM_DATA = x



scroolXPos: 0..255

; start of example
start_example@

waitvbl
waitvbl

; setup PPU
PPU_REG1 = 8
PPU_REG2 = %00010000


; loading pal
tmp = PPU_STAT_REG
loadPal

scroolXPos = 0

main@
; wait until we are in vblank
waitvbl

setSprite 0 10 10+scroolXPos  110  ; A
setSprite 1 29 20+scroolXPos  110  ; T
setSprite 2 10 30+scroolXPos  110  ; A
setSprite 3 21 40+scroolXPos  110  ; L
setSprite 4 10 50+scroolXPos  110  ; A
setSprite 5 23 60+scroolXPos  110  ; N

inc scroolXPos 

goto main